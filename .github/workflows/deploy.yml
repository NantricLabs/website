name: Deploy

on:
  push:
    # Branch on which to automatically run the deploy-action.
    # ┗━ Options: branch.name ━━ example: "main"
    branches: disabled

jobs:

  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '23'
          cache: 'npm'
      - run: npm ci
      - run: npm run lint
  
  deploy:
    needs: lint
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4
      - uses: appleboy/ssh-action@master
        with:
          key: ${{ secrets.SSH_KEY }}
          host: ${{ secrets.SSH_HOST || 'localhost' }}
          port: ${{ secrets.SSH_PORT || '22' }}
          username: ${{ secrets.SSH_USER || 'root' }}
          script: |
            # ━ Create project directory structure
            mkdir -p ~/env/${{github.event.repository.name}}
            cd ~/env/${{github.event.repository.name}}
            
            # ━ Initialize repository if it doesn't exist
            if [ ! -d ".git" ]; then
              git clone https://github.com/${{github.repository}} .
            fi
            
            # ━ Update codebase
            git fetch origin
            git reset --hard origin/${{ github.ref_name }}
            git clean -fd

            # ━ Configure environment
            echo '${{ secrets.APP_ENV }}' > .env
            
            # ━ Update and restart services
            docker compose pull
            docker compose build
            docker compose up -d

  healthcheck:
    needs: deploy
    runs-on: self-hosted
    steps:
      - uses: appleboy/ssh-action@master
        with:
          key: ${{ secrets.SSH_KEY }}
          host: ${{ secrets.SSH_HOST || 'localhost' }}
          port: ${{ secrets.SSH_PORT || '22' }}
          username: ${{ secrets.SSH_USER || 'root' }}
          script: |
            # ━ Extract domain from environment
            DOMAIN=$(echo '${{ secrets.APP_ENV }}' | grep NEXT_PUBLIC_DOMAIN | cut -d'=' -f2)
            
            # ━ Perform health check
            echo "Performing health check on $DOMAIN"
            curl -f http://$DOMAIN || curl -f https://$DOMAIN || exit 1
            echo "Health check passed"
